{
	"info": {
		"_postman_id": "14f61f8e-cd14-4d8b-a9e2-f67d6a01a07a",
		"name": "AssetRegister",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32491499"
	},
	"item": [
		{
			"name": "Consent",
			"item": [
				{
					"name": "Remove Consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[REMOVE CONSENT] Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{interlDevBaseUrl}}/idpay/consent?userId={{org_uid_ope}}",
							"host": [
								"{{interlDevBaseUrl}}"
							],
							"path": [
								"idpay",
								"consent"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{org_uid_ope}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Token Operatore",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let textResponse = pm.response.text()\r",
									"\r",
									"pm.test('Generate Portal Token', () => {\r",
									"    //verify response HTTP status \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Trace",
								"value": "true",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlIdPay}}/register/token/test",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"token",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not Accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[GET CONSENT] Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[GET CONSENT] Body matches expected structure\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.collectionVariables.set(\"consentVersionId\",responseJson.versionId);\r",
									"    const expectedVersionId = pm.collectionVariables.get(\"consentVersionId\");\r",
									"\r",
									"    pm.expect(responseJson).to.eql({\r",
									"        versionId: expectedVersionId,\r",
									"        firstAcceptance: true\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{identityPortalToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"mock-version-id\",\r\n    \"firstAcceptance\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlIdPay}}/register/consent",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Version Id Not Match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[SAVE CONSENT] Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"[SAVE CONSENT] Body matches expected structure\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"code\", \"VERSION_NOT_MATCHED\");\r",
									"    pm.expect(responseJson).to.have.property(\"message\", \"[CONSENTS] Received version id does not match the active one\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{identityPortalToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"test\",\r\n    \"firstAcceptance\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlIdPay}}/register/consent",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Version Id Match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[SAVE CONSENT] Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{identityPortalToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{consentVersionId}}\",\r\n    \"firstAcceptance\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlIdPay}}/register/consent",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[GET CONSENT] Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[GET CONSENT] Body matches expected structure\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{identityPortalToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"mock-version-id\",\r\n    \"firstAcceptance\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlIdPay}}/register/consent",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"consent"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Permission",
			"item": [
				{
					"name": "L1",
					"item": [
						{
							"name": "Token L1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Generate Portal Token ', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlIdPay}}/register/token/test",
									"host": [
										"{{baseUrlIdPay}}"
									],
									"path": [
										"register",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Founded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[GET PERMISSIONS] Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrlIdPay}}/register/permissions",
									"host": [
										"{{baseUrlIdPay}}"
									],
									"path": [
										"register",
										"permissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "L2",
					"item": [
						{
							"name": "Token L2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Generate Portal Token ', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia_admin}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlIdPay}}/register/token/test",
									"host": [
										"{{baseUrlIdPay}}"
									],
									"path": [
										"register",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Founded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[GET PERMISSIONS] Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrlIdPay}}/register/permissions",
									"host": [
										"{{baseUrlIdPay}}"
									],
									"path": [
										"register",
										"permissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Operatore",
					"item": [
						{
							"name": "Token Operatore",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Generate Portal Token ', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlIdPay}}/register/token/test",
									"host": [
										"{{baseUrlIdPay}}"
									],
									"path": [
										"register",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Founded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[GET PERMISSIONS] Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrlIdPay}}/register/permissions",
									"host": [
										"{{baseUrlIdPay}}"
									],
									"path": [
										"register",
										"permissions"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Product-Files",
			"item": [
				{
					"name": "Upload CSV",
					"item": [
						{
							"name": "Forbidden",
							"item": [
								{
									"name": "Token L1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Product File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[UPLOAD-RPDOCUT][INVITALIA][FORBIDDEN] Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-organization-id",
												"value": "{{orgId_Ente}}",
												"type": "text"
											},
											{
												"key": "x-user-id",
												"value": "{{userIdTest}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "csv",
													"contentType": "text/csv",
													"type": "file",
													"src": "../file/valid/cookinghobs_ok.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/product-files?category=TUMBLEDRYERS",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"product-files"
											],
											"query": [
												{
													"key": "category",
													"value": "TUMBLEDRYERS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Token L2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia_admind}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Product File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[UPLOAD-RPDOCUT][INVITALIA-ADMIN][FORBIDDEN] Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-organization-id",
												"value": "{{orgId_Ente}}",
												"type": "text"
											},
											{
												"key": "x-user-id",
												"value": "{{userIdTest}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "csv",
													"contentType": "text/csv",
													"type": "file",
													"src": "../file/valid/cookinghobs_ok.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/product-files?category=TUMBLEDRYERS",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"product-files"
											],
											"query": [
												{
													"key": "category",
													"value": "TUMBLEDRYERS"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Csv Error",
							"item": [
								{
									"name": "Token",
									"item": [
										{
											"name": "Token Operatore",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Generate Portal Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension Error",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][EXTENSION-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][EXTENSION-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.extension\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/eprel_template_wrong_extension.txt"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "TEST"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Dimension Error",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][DIMENSION-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][DIMENSION-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.maxsize\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/eprel_template_max_capacity.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category=TEST",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "TEST"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Category Error",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][CATEGORY-ERROR]  Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][CATEGORY-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.category\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/eprel_template_wrong_header.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category=TEST",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "TEST"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Empty Error Copy",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][EMPTY-FILE-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][EMPTY-FILE-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.empty\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/eprel_template_only_header.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "{{WASHINGMACHINES}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Row Error",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][MAX-ROW-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][MAX-ROW-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.maxrow\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/eprel_template_max_row.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "{{WASHINGMACHINES}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Eprel Header Error",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][EPREL-HEADER-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][EPREL-HEADER-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.header\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/eprel_template_wrong_header.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "{{WASHINGMACHINES}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Cookinghobs Header Error",
									"item": [
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][COOKINGHOBS-HEADER-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][COOKINGHOBS-HEADER-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.header\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/error/cookinghobs_template_wrong_header.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "{{COOKINGHOBS}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Upload Eprel",
							"item": [
								{
									"name": "Formal Error",
									"item": [
										{
											"name": "Categoria",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CATEGORY-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CATEGORY-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/eprel-ko/eprel_ko_categoria.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{WASHINGMACHINES}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CATEGORY-ERROR]  Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"\\\"Il campo Categoria è obbligatorio e deve essere \\\"\\\"Lavatrice\\\"\\\"\\\"\";\r",
																	"\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CATEGORY-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CATEGORY-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Codice GTIEAN",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-GTIN-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-GTIN-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/eprel-ko/eprel_ko_codice_gtiean.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{WASHINGMACHINES}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-GTIN-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il Codice GTIN/EAN è obbligatorio e deve essere univoco ed alfanumerico e lungo al massimo 14 caratteri\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-GTIN-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-GTIN-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Codice EPREL",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-EPREL-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-EPREL-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/eprel-ko/eprel_ko_codice_eprel.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{WASHINGMACHINES}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-EPREL-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il Codice EPREL è obbligatorio e deve essere un valore numerico\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-EPREL-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-EPREL-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Codice Prodotto",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CODE-PRODUCT-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CODE-PRODUCT-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/eprel-ko/eprel_ko_codice_prodotto.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{WASHINGMACHINES}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CODE-PRODUCT-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il Codice prodotto non deve contenere caratteri speciali o lettere accentate e deve essere lungo al massimo 100 caratteri\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CODE-PRODUCT-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CODE-PRODUCT-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Paese di Produzione",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-COUNTRY-ERROR]  Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-COUNTRY-ERROR]  Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/eprel-ko/eprel_ko_paese_di_produzione.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{WASHINGMACHINES}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{WASHINGMACHINES}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-COUNTRY-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Paese di Produzione non è un ISO 3166 valido o non è in maiuscolo\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-COUNTRY-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-COUNTRY-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "No Formal Error",
									"item": [
										{
											"name": "Token Operatore",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Generate Portal Token ', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][NO-FORMAL] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][NO-FORMAL] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "{{orgId_Ente}}",
														"type": "text"
													},
													{
														"key": "x-user-id",
														"value": "{{userIdTest}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/valid/eprel_ok_Asciugatrici.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{TUMBLEDRYERS}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "{{TUMBLEDRYERS}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Upload Cookinghobs",
							"item": [
								{
									"name": "Formal Error",
									"item": [
										{
											"name": "Categoria",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CATEGORY-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CATEGORY-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/cookinghobs-ko/cookinghobs_ko_categoria.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{COOKINGHOBS}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CATEGORY-ERROR]  Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"\\\"Il campo Categoria è obbligatorio e deve essere \\\"\\\"Piano cottura\\\"\\\"\\\"\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CATEGORY-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CATEGORY-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Codice GTIEAN",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-GTIN-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-GTIN-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/cookinghobs-ko/cookinghobs_ko_codice_gtiean.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{COOKINGHOBS}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-GTIN-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il Codice GTIN/EAN è obbligatorio e deve essere univoco ed alfanumerico e lungo al massimo 14 caratteri\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-GTIN-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-GTIN-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Codice Prodotto",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CODE-PRODUCT-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-CODE-PRODUCT-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/cookinghobs-ko/cookinghobs_ko_codice_prodotto.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{COOKINGHOBS}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CODE-PRODUCT-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il Codice prodotto non deve contenere caratteri speciali o lettere accentate e deve essere lungo al massimo 100 caratteri\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CODE-PRODUCT-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-CODE-PRODUCT-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Paese di Produzione",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-COUNTRY-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-COUNTRY-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/cookinghobs-ko/cookinghobs_ko_paese_di_produzione.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{COOKINGHOBS}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-COUNTRY-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Paese di Produzione non è un ISO 3166 valido o non è in maiuscolo\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-COUNTRY-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-COUNTRY-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Marca",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-BRAND-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-BRAND-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/cookinghobs-ko/cookinghobs_ko_marca.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{COOKINGHOBS}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-BRAND-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il campo Marca è obbligatorio e deve contenere una stringa lunga al massimo 100 caratteri\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-BRAND-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-BRAND-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Modello",
											"item": [
												{
													"name": "Token Operatore",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Generate Portal Token ', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/token/test",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload Product File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-MODEL-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[PRODUCT-FILE-UPLOADE][FORMAL-MODEL-ERROR] Response body contains expected fields with specific values\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.be.an(\"object\");\r",
																	"    pm.expect(jsonData).to.have.property(\"errorKey\", \"product.invalid.file.report\");\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"KO\");\r",
																	"    pm.expect(jsonData).to.have.property(\"productFileId\");\r",
																	"    pm.collectionVariables.set(\"productFileId\", jsonData.productFileId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "csv",
																	"contentType": "text/csv",
																	"type": "file",
																	"src": "../file/cookinghobs-ko/cookinghobs_ko_modello.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files"
															],
															"query": [
																{
																	"key": "category",
																	"value": "{{COOKINGHOBS}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Download Report",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-MODEL-ERROR] Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// Parse the JSON response\r",
																	"const response = pm.response.json();\r",
																	"const csvData = response.data;\r",
																	"\r",
																	"// Split the CSV data into rows\r",
																	"const rows = csvData.split('\\r\\n');\r",
																	"\r",
																	"// Get the header row and find the index of the \"Validation Errors\" column\r",
																	"const header = rows[0].split(';');\r",
																	"const validationErrorsIndex = header.indexOf('Errori di validazione');\r",
																	"\r",
																	"// Expected error message\r",
																	"const expectedErrorMessage = \"Il campo Marca è obbligatorio e deve contenere una stringa lunga al massimo 100 caratteri\";\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-MODEL-ERROR] Validation Errors column is present\", function () {\r",
																	"    pm.expect(validationErrorsIndex).to.be.above(-1);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"[DOWNLOAD-REPORT][FORMAL-MODEL-ERROR] All rows contain the expected validation error message\", function () {\r",
																	"    let allRowsValid = true;\r",
																	"    for (let i = 1; i < rows.length; i++) {\r",
																	"        if (rows[i].trim() === \"\") continue; // Skip empty rows\r",
																	"        const columns = rows[i].split(';');\r",
																	"        if (columns.length <= validationErrorsIndex || columns[validationErrorsIndex] !== expectedErrorMessage) {\r",
																	"            allRowsValid = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    pm.expect(allRowsValid).to.be.true;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrlIdPay}}/register/product-files/:prodoctFileId/report",
															"host": [
																"{{baseUrlIdPay}}"
															],
															"path": [
																"register",
																"product-files",
																":prodoctFileId",
																"report"
															],
															"variable": [
																{
																	"key": "prodoctFileId",
																	"value": "{{productFileId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "No Formal Error",
									"item": [
										{
											"name": "Token Opratore",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Generate Portal Token ', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload Product File",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[PRODUCT-FILE-UPLOADE][NO-FORMAL-ERROR] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"[PRODUCT-FILE-UPLOADE][NO-FORMAL-ERROR] Response body contains expected fields with specific values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"object\");\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "csv",
															"contentType": "text/csv",
															"type": "file",
															"src": "../file/valid/cookinghobs_ok.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/product-files?category={{COOKINGHOBS}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"product-files"
													],
													"query": [
														{
															"key": "category",
															"value": "{{COOKINGHOBS}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "CSV History",
					"item": [
						{
							"name": "Operatore",
							"item": [
								{
									"name": "Token Operatore",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token ', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Empty List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[CSV-HISTORY][OPERATORE] Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-organization-id",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/product-files",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"product-files"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "L1/L2",
							"item": [
								{
									"name": "Token L1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token ', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[CSV-HISTORY][INVITALIA][FORBIDDEN] Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-organization-id",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/product-files",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"product-files"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Batch Name",
					"item": [
						{
							"name": "Operatore",
							"item": [
								{
									"name": "Token Operatore",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token ', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Empy List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[BATCH-LIST][OPERATORE] Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/product-files/batch-list",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"product-files",
												"batch-list"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "L1/L2",
							"item": [
								{
									"name": "Token L1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token ', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Empty List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[BATCH-LIST][INVITALIA] Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/product-files/batch-list",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"product-files",
												"batch-list"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Product List",
					"item": [
						{
							"name": "Filters",
							"item": [
								{
									"name": "Token Operatore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													" \r",
													"pm.test('Generate Portal Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_ope}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_ope}}\",\n  \"orgVAT\": \"{{org_vat_ope}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_ope}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										},
										"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
									},
									"response": []
								},
								{
									"name": "Filter by category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"pm.test(\"[GET-PRODUCTS] All returned products have category = RANGEHOODS\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item => {",
													"    pm.expect(item.category).to.eql('Cappa da cucina');",
													"  });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&category=RANGEHOODS&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "category",
													"value": "RANGEHOODS"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter by productFileId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] All returned products have productFileId = 6879e4ec60bb4f20f7e67b27\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item => pm.expect(item.batchName).to.contains('6879e4ec60bb4f20f7e67b27'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&productFileId=6879e4ec60bb4f20f7e67b27&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "productFileId",
													"value": "6879e4ec60bb4f20f7e67b27"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter by eprelCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] All returned products have eprelCode = 22\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item =>  pm.expect(item.eprelCode).to.contains('22'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&eprelCode=22&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "eprelCode",
													"value": "22"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter by gtinCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] All returned products have gtinCode = YERS\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item =>  pm.expect(item.gtinCode).to.contains('COOKINGHOBS'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												},
												{
													"key": "gtinCode",
													"value": "{{COOKINGHOBS}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter by model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS ]Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] All returned products have model = COOKINGHOBS\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item =>  pm.expect(item.model).to.contains('COOKINGHOBS'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&model={{COOKINGHOBS}}&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "model",
													"value": "{{COOKINGHOBS}}"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter by brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] All returned products have brand = COOKINGHOBS\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item =>  pm.expect(item.brand).to.contains('COOKINGHOBS'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&brand={{COOKINGHOBS}}&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "brand",
													"value": "{{COOKINGHOBS}}"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter by status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] All returned products have status = APPROVED\", () => {",
													"  const data = pm.response.json();",
													"  pm.expect(data.content).to.be.an('array');",
													"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&status={{APPROVED}}&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "status",
													"value": "{{APPROVED}}"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Sorting",
							"item": [
								{
									"name": "Token Operatore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													" \r",
													"pm.test('Generate Portal Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_ope}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_ope}}\",\n  \"orgVAT\": \"{{org_vat_ope}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_ope}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										},
										"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
									},
									"response": []
								},
								{
									"name": "Sort by category ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by category ascending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].category).to.be.at.least(data[i-1].category);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=category,asc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "category,asc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by category descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by category descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].category).to.be.at.most(data[i-1].category);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=category,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "category,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by energyClass ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by productCode ascending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].energyClass).to.be.at.least(data[i-1].energyClass);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=energyClass,asc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "energyClass,asc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by energyClass descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by productCode descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].energyClass).to.be.at.most(data[i-1].energyClass);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=energyClass,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "energyClass,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by batchName ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by batchName ascending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].category).to.be.at.least(data[i-1].category);",
													"    pm.expect(data[i].productFileId).to.be.at.least(data[i-1].productFileId);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=batchName,asc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "batchName,asc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by batchName descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by batchName descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].category).to.be.at.most(data[i-1].category);",
													"    pm.expect(data[i].productFileId).to.be.at.most(data[i-1].productFileId);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=batchName,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "batchName,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by eprelCode ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by eprelCode ascending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].eprelCode).to.be.at.least(data[i-1].eprelCode);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=eprelCode,asc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "eprelCode,asc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by eprelCode descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by eprelCode descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].eprelCode).to.be.at.most(data[i-1].eprelCode);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=eprelCode,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "eprelCode,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by gtinCode ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by gtinCode ascending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].gtinCode).to.be.at.least(data[i-1].gtinCode);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=gtinCode,asc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "gtinCode,asc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by gtinCode descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by gtinCode descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].gtinCode).to.be.at.most(data[i-1].gtinCode);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=gtinCode,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "gtinCode,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by model ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by model descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].model).to.be.at.most(data[i-1].model);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=model,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "model,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by model descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by model descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].model).to.be.at.most(data[i-1].model);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=model,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "model,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by brand ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by brand descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].brand).to.be.at.most(data[i-1].brand);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=brand,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "brand,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by brand descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by gtinCode descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].brand).to.be.at.most(data[i-1].brand);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=brand,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "brand,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by status ascending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by status descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].status).to.be.at.most(data[i-1].status);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=status,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "status,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort by status descending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
													"pm.test(\"[GET-PRODUCTS] Products sorted by status descending\", () => {",
													"  const data = pm.response.json();",
													"  for (let i = 1; i < data.length; i++) {",
													"    pm.expect(data[i].status).to.be.at.most(data[i-1].status);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=status,desc&page=1&size=10&organizationId={{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "status,desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "organizationId",
													"value": "{{org_id_ope}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Forbidden",
							"item": [
								{
									"name": "No orgId when Operatore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-PRODUCTS][FORBIDDEN] Status code is 403\", () => pm.response.to.have.status(403));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/products?sort=category,asc&page=1&size=10",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"products"
											],
											"query": [
												{
													"key": "sort",
													"value": "category,asc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "State Change",
					"item": [
						{
							"name": "L1",
							"item": [
								{
									"name": "Token",
									"item": [
										{
											"name": "Token L1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															" \r",
															"pm.test('Generate Portal Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_invitalia}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_invitalia}}\",\n  \"orgVAT\": \"{{org_vat_invialia}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_invitalia}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												},
												"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
											},
											"response": []
										}
									]
								},
								{
									"name": "From Uploaded",
									"item": [
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][REJECTED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS01}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\",\r\n  \"formalMotivation\" :\"formalMotivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS01}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS01}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][SUPERVISED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS02}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Supervised Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = SUPERVISED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('SUPERVISED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS02}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS02}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][SUPERVISED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS03}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Supervised Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = SUPERVISED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('SUPERVISED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS03}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS03}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][SUPERVISED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS07}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Supervised Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = SUPERVISED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('SUPERVISED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS07}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS07}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][WAIT-APPROVED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wait Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = WAIT_APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('WAIT_APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][WAIT-APPROVED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS05}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wait Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = WAIT_APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('WAIT_APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS05}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS05}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Supervised",
									"item": [
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][SUPERVISED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS02}}\"\r\n  ],\r\n  \"currentStatus\": \"SUPERVISED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Supervised Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = SUPERVISED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('SUPERVISED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS02}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS02}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][REJECTED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS02}}\"\r\n  ],\r\n  \"currentStatus\": \"SUPERVISED\",\r\n  \"motivation\": \"motivation\",\r\n  \"formalMotivation\" :\"formalMotivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS02}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS02}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][WAIT-APPROVED][INVITALIA][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS03}}\"\r\n  ],\r\n  \"currentStatus\": \"SUPERVISED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wait Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = WAIT_APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('WAIT_APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS03}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS03}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Wait Approved",
									"item": [
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-WAIT-APPROVED][REJECTED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"WAIT_APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wait Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = WAIT_APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('WAIT_APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-WAIT-APPROVED][SUPERVISED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"WAIT_APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wait Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = WAIT_APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('WAIT_APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-WAIT-APPROVED][WAIT-APPROVED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"WAIT_APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wait Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = WAIT_APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('WAIT_APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Rejected",
									"item": [
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-REJECTED][REJECTED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS01}}\"\r\n  ],\r\n  \"currentStatus\": \"REJECTED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS01}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS01}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-REJECTED][SUPERVISED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS01}}\"\r\n  ],\r\n  \"currentStatus\": \"REJECTED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS01}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS01}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-REJECTED][WAIT-APPROVED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS01}}\"\r\n  ],\r\n  \"currentStatus\": \"REJECTED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS01}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS01}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forbidden",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][APPROVED][INVITALIA][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][UPLOADED][INVITALIA][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "L2",
							"item": [
								{
									"name": "Token",
									"item": [
										{
											"name": "Token L2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															" \r",
															"pm.test('Generate Portal Token ', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_invitalia}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_invitalia}}\",\n  \"orgVAT\": \"{{org_vat_invialia}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_invitalia_admin}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												},
												"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
											},
											"response": []
										}
									]
								},
								{
									"name": "From Uploaded",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][APPROVED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS06}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = UPLOAD\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('UPLOAD'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS06}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS06}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-UPLOADED][UPLOADED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS06}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = UPLOAD\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('UPLOAD'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS06}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS06}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Supervised",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-SUPERVISED][APPROVED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n   \"{{COOKINGHOBS07}}\"\r\n  ],\r\n  \"currentStatus\": \"SUPERVISED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Supervised Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = SUPERVISED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('SUPERVISED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS07}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS07}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-SUPERVISED][UPLOADED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS07}}\"\r\n  ],\r\n  \"currentStatus\": \"SUPERVISED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										},
										{
											"name": "Supervised Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = SUPERVISED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('SUPERVISED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS07}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS07}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Wait Approved",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-WAIT-APPROVE][APPROVED][INVITALIA-ADMIN][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"WAIT_APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approved Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-WAIT-APPROVE][UPLOADED][INVITALIA-ADMIN][STATUS-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS05}}\"\r\n  ],\r\n  \"currentStatus\": \"WAIT_APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = UPLOAD\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('UPLOAD'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS05}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS05}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Approved",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-APPROVED][APPROVED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS06}}\"\r\n  ],\r\n  \"currentStatus\": \"APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approved Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-APPROVED][UPLOADED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS06}}\"\r\n  ],\r\n  \"currentStatus\": \"APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approved Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "From Rejected",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-REJECTED][APPROVED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS01}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS01}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS01}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-REJECTED][UPLOADED][INVITALIA-ADMIN][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS01}}\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rejected Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = REJECTED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('REJECTED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS01}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS01}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forbidden",
									"item": [
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][REJECTED][INVITALIA-ADMIN][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][SUPERVISED][INVITALIA-ADMIN][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][WAIT-APPROVED][INVITALIA-ADMIN][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "L1 Approved",
							"item": [
								{
									"name": "Token",
									"item": [
										{
											"name": "Token L1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															" \r",
															"pm.test('Generate Portal Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_invitalia}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_invitalia}}\",\n  \"orgVAT\": \"{{org_vat_invialia}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_invitalia}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												},
												"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
											},
											"response": []
										}
									]
								},
								{
									"name": "From Approved",
									"item": [
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-APPROVED][REJECTED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approved Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-APPROVED][SUPERVISED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approved Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][FROM-APPROVED][WAIT-APPROVED][INVITALIA][STATUS-NOT-CHANGE] Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"{{COOKINGHOBS04}}\"\r\n  ],\r\n  \"currentStatus\": \"APPROVED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approved Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[GET-PRODUCTS] Status code is 200\", () => pm.response.to.have.status(200));",
															"pm.test(\"[GET-PRODUCTS] Product have status = APPROVED\", () => {",
															"  const data = pm.response.json();",
															"  pm.expect(data.content).to.be.an('array');",
															"  data.content.forEach(item =>  pm.expect(item.status).to.contains('APPROVED'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS04}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "organizationId",
															"value": "{{org_id_ope}}"
														},
														{
															"key": "gtinCode",
															"value": "{{COOKINGHOBS04}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Operatore",
							"item": [
								{
									"name": "Token",
									"item": [
										{
											"name": "Token Operatore",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															" \r",
															"pm.test('Generate Portal Token ', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_ope}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_ope}}\",\n  \"orgVAT\": \"{{org_vat_ope}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_ope}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/token/test",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"token",
														"test"
													]
												},
												"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
											},
											"response": []
										}
									]
								},
								{
									"name": "Forbidden",
									"item": [
										{
											"name": "To Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][APPROVED][OPERATORE][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Rejected",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][APPROVED][OPERATORE][REJECTED] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/rejected",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"rejected"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Supervisioned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][SUPERVISED][OPERATORE][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/supervised",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"supervised"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Wait Approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][WAIT_APPROVED][OPERATORE][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/wait-approved",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"wait-approved"
													]
												}
											},
											"response": []
										},
										{
											"name": "To Uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"[UPDATE-STATUS][UPLOADED][OPERATORE][FORBIDDEN] Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "x-organization-id",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-organization-selected",
														"value": "b5ae0b41-b854-414e-8295-078595ee1db4",
														"type": "text"
													},
													{
														"key": "x-user-email",
														"value": "test",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gtinCodes\": [\r\n    \"2068977\"\r\n  ],\r\n  \"currentStatus\": \"UPLOADED\",\r\n  \"motivation\": \"motivation\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/register/products/update-status/restored",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"register",
														"products",
														"update-status",
														"restored"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/*",
									"",
									"Cookinhobs 01 UP",
									"Cookinhobs 02 UP",
									"Cookinhobs 03 UP ",
									"Cookinhobs 04 UP",
									"Cookinhobs 05 UP",
									"Cookinhobs 06 UP",
									"Cookinhobs 07 UP",
									"Cookinhobs 08 UP",
									"Cookinhobs 09 UP",
									"",
									"Cookinhobs 01 REJ",
									"Cookinhobs 02 SUP",
									"Cookinhobs 03 SUP",
									"Cookinhobs 04 WAIT",
									"Cookinhobs 05 WAIT",
									"",
									"Cookinhobs 02 SUP",
									"Cookinhobs 02 REJ",
									"Cookinhobs 03 WAIT",
									"",
									"Cookinhobs 04 WAIT",
									"Cookinhobs 04 WAIT",
									"Cookinhobs 04 WAIT",
									"",
									"Cookinhobs 01 REJ",
									"Cookinhobs 01 REJ",
									"Cookinhobs 01 REJ",
									"",
									"-----",
									"",
									"Cookinhobs 06 UP",
									"Cookinhobs 06 UP",
									"",
									"Cookinhobs 07 SUP",
									"Cookinhobs 07 SUP",
									"",
									"Cookinhobs 04 APP",
									"Cookinhobs 05 UP",
									"",
									"Cookinhobs 04 APP",
									"Cookinhobs 04 APP",
									"",
									"Cookinhobs 01 REJ",
									"Cookinhobs 01 REJ",
									"",
									"----",
									"",
									"Cookinhobs 04 APP",
									"Cookinhobs 04 APP",
									"Cookinhobs 04 APP",
									"*/"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Institutiom",
			"item": [
				{
					"name": "L1/L2",
					"item": [
						{
							"name": "Get Info",
							"item": [
								{
									"name": "Token L1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_invitalia}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_invitalia}}\",\r\n  \"orgVAT\": \"{{org_vat_invialia}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_invitalia}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrive Info Institution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-INSTITUTION][INVITALIA] Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Parse the JSON response\r",
													"const response = pm.response.json();\r",
													"pm.test(\"[GET-INSTITUTION][INVITALIA] All fields are not null or equal to N/A\", function () {\r",
													"    pm.expect(response.address).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });\r",
													"    pm.expect(response.city).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });    \r",
													"    pm.expect(response.county).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });   \r",
													"    pm.expect(response.country).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });    \r",
													"    pm.expect(response.zipCode).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });    \r",
													"    pm.expect(response.digitalAddress).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });    \r",
													"    pm.expect(response.description).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });    \r",
													"    pm.expect(response.taxCode).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });    \r",
													"    pm.expect(response.externalId).to.satisfy(function(value) {\r",
													"        return value !== null || value === \"N/A\";\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/institutions/{{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"institutions",
												"{{org_id_ope}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrive Info InstitutionS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-INSTITUTION-S][INVITALIA] Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"[GET-INSTITUTION-S][INVITALIA]All fields are not null or equal to N/A\", function () {\r",
													"    const response = pm.response.json();\r",
													"    response.institutions.forEach(function(institution) {\r",
													"        pm.expect(institution.institutionId).to.satisfy(function(value) {\r",
													"            return value !== null || value === \"N/A\";\r",
													"        });\r",
													"        pm.expect(institution.createdAt).to.satisfy(function(value) {\r",
													"            return value !== null || value === \"N/A\";\r",
													"        });\r",
													"        pm.expect(institution.updatedAt).to.satisfy(function(value) {\r",
													"            return value !== null || value === \"N/A\";\r",
													"        });\r",
													"        pm.expect(institution.description).to.satisfy(function(value) {\r",
													"            return value !== null || value === \"N/A\";\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/institutions/",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"institutions",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Operatore",
					"item": [
						{
							"name": "Forbidden",
							"item": [
								{
									"name": "Token Operatore",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Generate Portal Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"{{org_aud}}\",\r\n  \"iss\": \"{{org_iss}}\",\r\n  \"uid\": \"{{org_uid_ope}}\",\r\n  \"name\": \"{{org_name_ope}}\",\r\n  \"familyName\": \"{{org_familyName_ope}}\",\r\n  \"email\": \"{{org_email_ope}}\",\r\n  \"orgId\": \"{{org_id_ope}}\",\r\n  \"orgVAT\": \"{{org_vat_ope}}\",\r\n  \"orgName\": \"{{org_name_full_ope}}\",\r\n  \"orgRole\": \"{{org_role_ope}}\",\r\n  \"orgPec\": \"{{org_pec_ope}}\",\r\n  \"orgAddress\": \"{{org_address_ope}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/register/token/test",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrive Info Institution Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-INSTITUTION][OPERATORE][FORBIDDEN] Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/institutions/{{org_id_ope}}",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"institutions",
												"{{org_id_ope}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrive Info InstitutionS Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[GET-INSTITUTION-S][OPERATORE][FORBIDDEN] Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/register/institutions/",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"register",
												"institutions",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Clean",
			"item": [
				{
					"name": "Token Operatore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let textResponse = pm.response.text()\r",
									" \r",
									"pm.test('Generate Portal Token', () => {\r",
									"    //verify response HTTP status \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Trace",
								"value": "true"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"aud\": \"{{org_aud}}\",\n  \"iss\": \"{{org_iss}}\",\n  \"uid\": \"{{org_uid_ope}}\",\n  \"name\": \"{{org_name_ope}}\",\n  \"familyName\": \"{{org_familyName_ope}}\",\n  \"email\": \"{{org_email_ope}}\",\n  \"orgId\": \"{{org_id_ope}}\",\n  \"orgVAT\": \"{{org_vat_ope}}\",\n  \"orgName\": \"{{org_name_full_ope}}\",\n  \"orgRole\": \"{{org_role_ope}}\",\n  \"orgPec\": \"{{org_pec_ope}}\",\n  \"orgAddress\": \"{{org_address_ope}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlIdPay}}/register/token/test",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"token",
								"test"
							]
						},
						"description": "Generated from cURL: curl --location 'https://api-io.dev.cstar.pagopa.it/idpay-itn/register/token/test' \\\n\r\n--header 'Ocp-Apim-Trace: true' \\\n\r\n--header 'Content-Type: application/json' \\\n\r\n--data-raw '{\n\r\n    \"aud\": \"idpay.register.welfare.pagopa.it\",\n\r\n    \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\n\r\n    \"uid\": \"83843864-f3c0-4def-badb-7f197471b72e\",\n\r\n    \"name\": \"pippo\",\n\r\n    \"familyName\": \"qwerty\",\n\r\n    \"email\": \"pippo@test.email.it\",\n\r\n    \"orgId\": \"390cea38-f2de-4bcb-a181-d6eef99fe528\",\n\r\n    \"orgVAT\": \"80117082724\",\n\r\n    \"orgName\": \"Ente di test IdPay\",\n\r\n    \"orgRole\": \"admin\",\n\r\n    \"orgPec\": \"pec\",\n\r\n    \"orgAddress\": \"address\"\n\r\n}'\n "
					},
					"response": []
				},
				{
					"name": "Get Product By OrgId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[GET-PRODUCTS][CLEAN] Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"let response = pm.response.json();",
									"let gtinCodes = [];",
									"",
									"if (response.content && Array.isArray(response.content)) {",
									"    gtinCodes = response.content.map(item => item.gtinCode);",
									"}",
									"",
									"console.log(gtinCodes)",
									"pm.collectionVariables.set(\"gtinCodes\", JSON.stringify(gtinCodes));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{identityPortalToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrlIdPay}}/register/products?page=0&size=10&organizationId={{org_id_ope}}&gtinCode={{COOKINGHOBS}}",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "category,asc"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "organizationId",
									"value": "{{org_id_ope}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Product from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[REMOVE-PRODUCTS] Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ids\":{{gtinCodes}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{interlDevBaseUrl}}/idpay/register/clean/products",
							"host": [
								"{{interlDevBaseUrl}}"
							],
							"path": [
								"idpay",
								"register",
								"clean",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product File By OrgID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"let productFileIds = [];\r",
									"\r",
									"if (response.content && Array.isArray(response.content)) {\r",
									"    productFileIds = response.content.map(item => item.productFileId);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"productFileIds\", JSON.stringify(productFileIds));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{identityPortalToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrlIdPay}}/register/product-files",
							"host": [
								"{{baseUrlIdPay}}"
							],
							"path": [
								"register",
								"product-files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Product File from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[REMOVE-PRODUCTS-FILE] Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ids\":{{productFileIds}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{interlDevBaseUrl}}/idpay/register/clean/products-file",
							"host": [
								"{{interlDevBaseUrl}}"
							],
							"path": [
								"idpay",
								"register",
								"clean",
								"products-file"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Formal File from Azure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[REMOVE-FORMAL-FILE] Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ids\":{{productFileIds}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{interlDevBaseUrl}}/idpay/register/clean/products-file/formal",
							"host": [
								"{{interlDevBaseUrl}}"
							],
							"path": [
								"idpay",
								"register",
								"clean",
								"products-file",
								"formal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Report File from Azure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[REMOVE-REPORT-FILE]  Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ids\":{{productFileIds}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{interlDevBaseUrl}}/idpay/register/clean/products-file/report",
							"host": [
								"{{interlDevBaseUrl}}"
							],
							"path": [
								"idpay",
								"register",
								"clean",
								"products-file",
								"report"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "productFileId",
			"value": ""
		},
		{
			"key": "gtinCodes",
			"value": ""
		},
		{
			"key": "productFileIds",
			"value": ""
		},
		{
			"key": "consentVersionId",
			"value": ""
		}
	]
}
